<?php 
// The main project navigation
$this->step = 7;
echo $this->partial('my-project/my-project-navigation.phtml',array("step" => $this->step,"project" => $this->project));
?>

<h3 class="fl-edit-project-subsection">Your project is currently in <span class="fl-level-info">Level <?php echo $this->project->level;?></span></h3>

<div class="fl-cnt-100">
  <div class="alert alert-info">
    <p>Think of this as the back-end management of your project. As the project creator, you are solely responsible for deciding when to progress through each of our levels. As of right now, the only target weâ€™ve implemented for each level is a minimum of one task completed. What those tasks are is up to you, and we urge you to enter as many tasks as you can for your project. For one, this is a way of signalling the depth of your work and progress (all users can see your completed tasks via your Levels bar on the project page). Secondly, this documentation of completed tasks serves as a potential FLO~ feature in future iterations. As we aggregate this data, we can come closer to defining the tasks that most projects get done at each level and, in turn, develop an automated level system based upon this.</p>
  </div>
</div>

<div class="fl-cnt-100">
<?php echo $this->form;?>
</div>

<div class="fl_thick_divider"></div>

<h3 class="fl-edit-project-subsection fl-top20">Tasks for <span class="fl-level-info">Level <?php echo $this->project->level;?></span></h3>

<div class="fl-cnt-100">
  <div class="alert alert-info">
    <p>For an in-depth look at what to focus on at each level, check out our <a href="/index/learn-more" title="Learn More">Learn More</a> section. </p>
  </div>
</div>

<div class="fl-cnt-100">
  <div id="alert-area"></div>
</div>	

<div class="fl-form-ajax fl-bottom20">
<!-- Form for creating new task -->
<form id="form-create-task" action="#" method="post" autocomplete="off">
	<div class="input-append">
		<input type="hidden" name="level" value="<?php echo $this->project->level;?>" />
		<input type="text" name="task" placeholder="write your task for this level" class="span6" id="input-task-create"/><input type="submit" class="btn btn-primary create"  name='submit' data-toggle="button" data-loading-text="processing..." value="create new task" />
	</div>						
</form>
</div>

 <div class="fl-cnt-100">   
 	<ol id="question_list">
	<table id ="question_list" class="table">
		<tr> <td>
		<script id="question_list_template" type="text/x-handlebars-template">
				{{#each this}}				
					<form method="post" action="" class="form-search" data-question_id="{{id}}">
						<input  class="finish" type="checkbox" name="finished" {{#if finished}} checked="checked" {{/if}} />
						<input type="hidden" name="task_id" value="{{id}}" />
						<input type="text" name="task" value="{{task}}" class="span5"/>
						<input class="btn btn-success update" type="submit"  data-loading-text="processing..." value="edit" name="submit" />
						<input class="btn  btn-danger delete" type="submit"  data-loading-text="processing..." value="delete" name="submit" />
						</form>
				{{/each}}

		</script>
			</td>
		</tr>
	</table>
	</ol>
</div>

<div class="fl-cnt-100">		
		<div id="question_info">
			<script id="question_info_template" type="text/x-handlebars-template">
						<div class="well">
							{{question}} has id {{id}}
						</div>
			</script>
		</div>
</div>


<script src="/media/tools/handlebars-1.0.0.beta.6.js"></script>
<script type="text/javascript">  	
			var Questions = {

			init: function(config){
				// ajax setup
				$.ajaxSetup({
					url: "/member/my-project/ajax-task/id/<?php echo $this->project->id;?>", 
					type: 'POST',
					dataType: 'json',
				});
				
				this.config = config;
				this.bindEvents();
				this.setutTemplates();
				this.findQuestions(); // fill the question_list
				},
			// setting template system
			setutTemplates: function(){
				this.config.questionListTemplate = Handlebars.compile(this.config.questionListTemplate);
				this.config.QuestionInfoTemplate = Handlebars.compile(this.config.QuestionInfoTemplate);
			
				},
				
			bindEvents: function(){
				this.config.questionList.on('click','form input.update',this.updateQuestion); // edit question 
				this.config.questionList.on('click','form input.delete',this.deleteQuestion); // delete question
				this.config.questionList.on('click','form input.finish',this.finishTask); // complete question
				this.config.formCreate.on('click','.input-append input.create',this.createQuestion); // create new question
				
				},
				
			findQuestions: function(){
				 var self = Questions;
					
				 $.ajax({
				 	data: "_method=findAllForCurrentLevel",// take data from the form and send it to the method delete
					 }).done(
						function (results){
				 			self.config.questionList.empty();
							if(results.data[0]){
								self.config.questionList.append(self.config.questionListTemplate(results.data));
							}else{
								self.config.questionList.append("No tasks.");
							}
				 		}
				 );	
				},
				// finish task
				finishTask:function(e){
					var self = Questions;
					var form = $(this).parent(); // directly this form
					//create method
					 $.ajax({
					 	data: form.serialize() + "&_method=finish", // take data from the form and send it to the method finish
					 }).done(
							function (results){
					 			newAlert (results.respond, results.message); // display alert
					 		}
					 );
					
					// e.preventDefault();
				},	
				
			// create question
			createQuestion:function(e){
				var self = Questions;
				var but  = $(this).button('toggle');
				but.button('loading');
				var form = $(this).parent().parent(); // directly this form
				//create method
				 $.ajax({
				 	data: form.serialize() + "&_method=create", // take data from the form and send it to the method create
				 }).done(
						function (results){
				 			newAlert (results.respond, results.message); // display alert
				 			self.findQuestions(); // refresh questions
				 			but.button('reset');
				 			form.each (function(){
  										this.reset();
							});
				 		}
				 );
				
				 e.preventDefault();
			},	

			// delete task
			deleteQuestion:function(e){
				var self = Questions;
				$(this).button('loading');
				var form = $(this).parent();
				//delete method
				$.ajax({
					data:  form.serialize() + "&_method=delete", // take data from the form and send it to the method delete
				}).done(
						function (results){
							newAlert (results.respond, results.message); // display alert
							self.findQuestions(); // refresh questions
						}
				);
				e.preventDefault();
			},	

			// update question
			updateQuestion:function(e){
				var self = Questions;
				var form = $(this).parent();
				$(this).button('loading');
				console.log($(this));
				//delete method
				$.ajax({
					data:  form.serialize() + "&_method=update", // take data from the form and send it to the method update
				}).done(
						function (results){
							newAlert (results.respond, results.message); // display alert
							self.findQuestions(); // refresh questions
						}
				);
				e.preventDefault();
			},	

			};

			Questions.init({
				formCreate: $('#form-create-task'),
				questionListTemplate: $('#question_list_template').html(),
				questionList: $("#question_list"),
				questionInfo :  $("#question_info"),
				QuestionInfoTemplate :  $("#question_info_template"),

			});
 </script>  