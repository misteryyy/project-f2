<?php

namespace App\Entity\Proxy\__CG__\App\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ProjectApplication extends \App\Entity\ProjectApplication implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setUser($user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function setProject($project)
    {
        $this->__load();
        return parent::setProject($project);
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getRoleName()
    {
        $this->__load();
        return parent::getRoleName();
    }

    public function getContent()
    {
        $this->__load();
        return parent::getContent();
    }

    public function getResult()
    {
        $this->__load();
        return parent::getResult();
    }

    public function getState()
    {
        $this->__load();
        return parent::getState();
    }

    public function getLevel()
    {
        $this->__load();
        return parent::getLevel();
    }

    public function getProject()
    {
        $this->__load();
        return parent::getProject();
    }

    public function getProjectRole()
    {
        $this->__load();
        return parent::getProjectRole();
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setRoleName($roleName)
    {
        $this->__load();
        return parent::setRoleName($roleName);
    }

    public function setContent($content)
    {
        $this->__load();
        return parent::setContent($content);
    }

    public function setResult($result)
    {
        $this->__load();
        return parent::setResult($result);
    }

    public function setState($state)
    {
        $this->__load();
        return parent::setState($state);
    }

    public function setLevel($level)
    {
        $this->__load();
        return parent::setLevel($level);
    }

    public function setProjectRole($projectRole)
    {
        $this->__load();
        return parent::setProjectRole($projectRole);
    }

    public function __get($property)
    {
        $this->__load();
        return parent::__get($property);
    }

    public function __set($property, $value)
    {
        $this->__load();
        return parent::__set($property, $value);
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'roleName', 'created', 'modified', 'content', 'description', 'result', 'state', 'level', 'project', 'projectRole', 'user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}